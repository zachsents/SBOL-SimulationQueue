version: "3.4"
services:
  api:
    build:
      context: ./
      dockerfile: api/Dockerfile
    container_name: simulationqueue-api
    depends_on:
      - mongodb
    # restart: unless-stopped
    ports:
      - "${EXPRESS_PORT}:3000"
    networks:
      - app-network
    environment:
      - EXPRESS_PORT
      - MONGO_USER
      - MONGO_PASS
      - MONGO_HOST
      - MONGO_PORT
      - DB_NAME
      - NODE_ENV
      - JOB_STORAGE_FOLDER
      - JOB_COLLECTION
    volumes:
      - job-storage:/app/${JOB_STORAGE_FOLDER}
  watcher:
    build:
      context: ./
      dockerfile: watcher/Dockerfile
    container_name: simulationqueue-watcher
    depends_on:
      - mongodb
    # restart: unless-stopped
    networks:
      - app-network
    environment:
      - MONGO_USER
      - MONGO_PASS
      - MONGO_HOST
      - MONGO_PORT
      - DB_NAME
      - NODE_ENV
      - JOB_STORAGE_FOLDER
      - JOB_COLLECTION
      - IBIOSIM_URL
      - MAX_CONCURRENT_JOBS
    volumes:
      - job-storage:/app/${JOB_STORAGE_FOLDER}
  mongodb:
    container_name: simulationqueue-db
    image: mongo
    restart: unless-stopped
    ports:
      - "${MONGO_PORT}:27017"
    networks:
      - app-network
    volumes:
      - data-volume:/data/db
    logging:
      driver: "none"
    
    # stuff added for replica set
    # source: https://zgadzaj.com/development/docker/docker-compose/turning-standalone-mongodb-server-into-a-replica-set-with-docker-compose#original-configurations
    hostname: "${MONGO_HOST}"
    environment:
      - MONGO_REPLICA_SET_NAME
    healthcheck:
      test: test $$(echo "rs.initiate().ok || rs.status().ok" | mongo --quiet) -eq 1
      interval: 10s
      start_period: 30s
    command: ["--replSet", "${MONGO_REPLICA_SET_NAME}", "--bind_ip_all"]

networks:
    app-network:
        driver: bridge

volumes:
    data-volume:
    job-storage: